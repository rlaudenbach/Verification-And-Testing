<AML>
 <Item type="Method" id="319AEB04DFB1416F9BBB9AB34D8EDAEC" action="add">
  <comments>called from an action</comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// For test runs action "re Run" means creating a new version of a "released" (Pass or Fail) test run

// Cloned from "PE_CreateNewRevision"

//System.Diagnostics.Debugger.Launch();System.Diagnostics.Debugger.Break();


Innovator inn = this.getInnovator();
string thisType = this.getType();
Item testRunItem = this;

// the "re Run" action can trigger from item types:  "vt_TestPlan_Run"  or "vt_TestRun"
if (thisType == "vt_TestPlan_Run") {
    testRunItem = this.getRelatedItem();
    bool reportError = false;
    
    Item testPlan = this.getInnovator().getItemById("vt_TestPlan", this.getProperty("source_id","invlaid"));
    switch (testPlan.getProperty("state","")) {
        case "Planning":
        case "Running":
            break;
        default:
            reportError = true;
            break;
    }
    if (testPlan.getLockStatus() > 0) {
        reportError = true;
    }
    if (reportError) {
        return inn.newError("Test Plan must be unclaimed and in status 'Planning' or 'Running' for this action!");
    }
}


if(testRunItem.isNew() || testRunItem.getAttribute("isTemp", "").Equals("1", StringComparison.OrdinalIgnoreCase))
{
  return inn.newError(CCO.ErrorLookup.Lookup("PE_CreateNewRevision_MustBeSaved", thisType));
}

bool isInReleasedState = String.Equals(testRunItem.getProperty("is_released","0"), "1", StringComparison.Ordinal);

// Item must be in the Released state
if (!isInReleasedState && testRunItem.getProperty("state","") != "Fail")
{
  return inn.newError("This action can only be fun on 'Failed' test runs !");
}

// Make sure the current user is in the Owner identity
string ownedById = testRunItem.getProperty("owned_by_id");
if (!CCO.Permissions.IdentityListHasId(Aras.Server.Security.Permissions.Current.IdentitiesList, ownedById))
{
  return inn.newError(CCO.ErrorLookup.Lookup("PE_ManualRelease_YouMustBeAMember", testRunItem.getPropertyAttribute("owned_by_id","keyed_name","Owner")));
}

// Grant 'Aras PLM' permissions
//Aras.Server.Security.Identity plmIdentity = Aras.Server.Security.Identity.GetByName("Aras PLM");
Aras.Server.Security.Identity plmIdentity = Aras.Server.Security.Identity.GetByName("Administrators");
bool PermissionWasSet  = Aras.Server.Security.Permissions.GrantIdentity(plmIdentity);

try
{
  // Version and unlock the item
  Item resItem = testRunItem.apply("version");
  if (resItem.isError()) return resItem;
  
  // reset start/complete dates
  resItem.setProperty("started_on","");
  resItem.setProperty("completed_on","");
  resItem = resItem.apply("merge");    // merge also unlocks the item !
  return resItem; 
}
finally
{
  // Revoke 'Aras PLM' permissions
  if (PermissionWasSet) Aras.Server.Security.Permissions.RevokeIdentity(plmIdentity);
}]]></method_code>
  <method_type>C#</method_type>
  <name>vt_ReRun_TestRun</name>
 </Item>
</AML>